@width: (960/@fontSize)*1em;
@columnWidth: 64;
@gutterWidth: 16;
@columnNumber: 12;

// DEBUG
#demo {
  display: block;
  [class*="span"] {
    background: fadeout(@primaryColor,75%);
    color: @white;
    height: 100%;
  }
  .row {
    height: @fontSize/@em;
    background: fadeout(@primaryColor, 90%);
  }
  .visuallyHidden;
}
// DEBUG

.clearfix {
  *zoom: 1;
  &:before,
  &:after {
    display: table;
    content: "";
  }
  &:after {
    clear: both;
  }
}
.makeRow() {
  margin-left: (@gutterWidth * -1) /@em;
  .clearfix();
}
.makeColumn(@columns: 1) {
  float: left;
  margin-left: (@gutterWidth) /@em;
  width: ((@columnWidth * @columns) + (@gutterWidth * (@columns - 1))) /@em;
}
.offset(@columns:1) {
  margin-left: ((@columnWidth * @columns) + (@gutterWidth * (@columns - 1)) + (2* @gutterWidth)) /@em;
}
#grid {
  .core (@columnWidth, @gutterWidth) {
    .spanX (@index) when (@index > 0) {
      (~".span@{index}") { .span(@index); }
      .spanX(@index - 1);
    }
    .spanX (0) {}

    .offsetX (@index) when (@index > 0) {
      (~".offset@{index}") { .offset(@index); }
      .offsetX(@index - 1);
    }
    .offsetX (0) {}

    .pushX (@index) when (@index > 0) {
      (~".push@{index}") { .push(@index); }
      .pushX(@index - 1);
    }
    .pushX (0) {}

    .pullX (@index) when (@index > 0) {
      (~".pull@{index}") { .pull(@index); }
      .pullX(@index - 1);
    }
    .pullX (0) {}

    .offset (@columns) {
      margin-left: ((@columnWidth * @columns) + (@gutterWidth * (@columns - 1)) + (@gutterWidth * 2)) /@em;
    }

    .span (@columns) {
      width: ((@columnWidth * @columns) + (@gutterWidth * (@columns - 1))) /@em;
    }

    .push (@columns) {
      left: ((@columnWidth * @columns) + (@gutterWidth * (@columns - 1)) + (@gutterWidth)) /@em;
    }

    .pull (@columns) {
      left: -1*((@columnWidth * @columns) + (@gutterWidth * (@columns - 1)) + @gutterWidth) /@em
    }

    .row {
      margin-left: (@gutterWidth * -1) /@em;
      .clearfix();
    }

    [class*="span"] {
      float: left;
      margin-left: (@gutterWidth) /@em;
    }

    [class*="push"],
    [class*="pull"] {
      position: relative;
    }

    // generate .spanX and .offsetX
    .spanX (@columnNumber);
    .offsetX (@columnNumber);
    .pushX (@columnNumber);
    .pullX (@columnNumber);
  }
}

#grid > .core(@columnWidth, @gutterWidth);

body {
  min-width: @width; // 960px / 16px = 60em;
}
.container {
  margin-left: auto;
  margin-right: auto;
  width: @width; // 960px / 16px = 60em;
  .clearfix();
}

header[role="banner"],
div[role="main"],
footer[role="contentinfo"] {
  .makeRow();
}

header[role="banner"] {
  margin-bottom: (@lineHeight - @headerBorder) /@em;

  hgroup {
    .makeColumn(3);
  }

  nav[role="navigation"] {
    .makeColumn(3);
    .offset(6);
    #sitenav { .makeColumn(1); }
    #social  { .makeColumn(2); }
  }
}

div[role="main"] {
  .makeRow();
  .asterisk, #pagination  {
    .makeRow();
  }

  article {
    .makeRow();

    header {
      .makeColumn(8);
      .offset(2);
    }
    section, footer{
      .makeColumn(6);
      .offset(3);
    }

    aside {
      .makeColumn(2);
    }

    header {
      hgroup {
        .makeColumn(6);
        .offset(1);
      }
      .decoration {
        .makeColumn(1);
      }
    }
  }

  #pagination {
    margin-top: @lineHeight /@em;
  }
}

footer[role="contentinfo"] {
  margin-top: (@lineHeight - @footerBorder) /@em;

  #license,
  #feed, 
  #about {
    .makeColumn(2);
  }
  #license {
    .offset(3);
  }
}